{
  "stats": {
    "suites": 1,
    "tests": 1,
    "passes": 1,
    "pending": 0,
    "failures": 0,
    "start": "2024-09-18T12:04:49.122Z",
    "end": "2024-09-18T12:04:53.076Z",
    "duration": 3954,
    "testsRegistered": 1,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "6cd536da-b2ec-49b8-a6f1-f5b98a8dbb90",
      "title": "",
      "fullFile": "cypress/e2e/uploadImageToPet.spec.js",
      "file": "cypress/e2e/uploadImageToPet.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "3ad9f559-7c74-46bb-8682-03ac2967ac9d",
          "title": "upload image to pet",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "Uploads an image to the pet successfully and logs the status code",
              "fullTitle": "upload image to pet Uploads an image to the pet successfully and logs the status code",
              "timedOut": null,
              "duration": 3927,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "// Define the pet ID\nconst petId = 1;\n// Use the fixture method to read the image file from the cypress fixtures folder\ncy.fixture('pet2.jpg', 'binary').then(fileContent => {\n  const blob = Cypress.Blob.binaryStringToBlob(fileContent, 'image/jpeg');\n  // Manually create a FormData object and append the image\n  const formData = new FormData();\n  formData.append('file', blob, 'pet2.jpg');\n  // Convert FormData to a form-data readable stream\n  cy.request({\n    method: 'POST',\n    url: `/pet/${petId}/uploadImage`,\n    // Upload image to the pet\n    headers: {\n      'Content-Type': 'multipart/form-data'\n    },\n    body: formData\n  }).then(response => {\n    console.log(response); // Log the full response object\n    cy.log(JSON.stringify(response.body)); // Log the body to Cypress Test Runner\n    // Now try to access the message field\n    const responseMessage = response.body.message;\n    // Log the response message to both Cypress and console\n    cy.log(`Response Message: ${responseMessage}`);\n    console.log(`Response Message: ${responseMessage}`);\n  });\n});",
              "err": {},
              "uuid": "931b427d-d464-469a-9e83-48239198c79b",
              "parentUUID": "3ad9f559-7c74-46bb-8682-03ac2967ac9d",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "931b427d-d464-469a-9e83-48239198c79b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3927,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}