{
  "stats": {
    "suites": 1,
    "tests": 3,
    "passes": 1,
    "pending": 0,
    "failures": 2,
    "start": "2024-09-19T02:24:13.332Z",
    "end": "2024-09-19T02:24:15.954Z",
    "duration": 2622,
    "testsRegistered": 3,
    "passPercent": 33.33333333333333,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "62c6ab52-a67d-4fcb-8bc3-5a4e119471fc",
      "title": "",
      "fullFile": "cypress/e2e/addPetToStore.spec.js",
      "file": "cypress/e2e/addPetToStore.spec.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4d8e7edc-46d7-4660-a111-19f7a00fd46b",
          "title": "Add pet to the store - Test Senarios",
          "fullFile": "",
          "file": "",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "successfully able to add the pet with all the mandatory fields ",
              "fullTitle": "Add pet to the store - Test Senarios successfully able to add the pet with all the mandatory fields ",
              "timedOut": null,
              "duration": 1239,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "cy.request({\n  method: 'POST',\n  url: '/pet',\n  body: petData,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.id).to.equal(petId);\n  expect(response.body.name).to.equal(petData.name);\n  expect(response.body.photoUrls).to.deep.equal(petData.photoUrls);\n  // Log the response body\n  cy.log('Response Body:', JSON.stringify(response.body));\n});",
              "err": {},
              "uuid": "b8dddb0a-f4f4-487f-a7a0-57767df104e7",
              "parentUUID": "4d8e7edc-46d7-4660-a111-19f7a00fd46b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should return 400 when mandatory fields are missing while adding the pet",
              "fullTitle": "Add pet to the store - Test Senarios should return 400 when mandatory fields are missing while adding the pet",
              "timedOut": null,
              "duration": 642,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const missingMandatoryFieldsPetData = {\n  status: 'availabe'\n};\ncy.request({\n  method: 'POST',\n  url: '/pet',\n  body: missingMandatoryFieldsPetData,\n  headers: {\n    'Content-Type': 'application/json'\n  },\n  failOnStatus: 'false'\n}).then(response => {\n  expect(response.status).to.equal(400);\n  cy.log('Invalid pet creation attempt due to missing fields.');\n});",
              "err": {
                "message": "AssertionError: expected 200 to equal 400",
                "estack": "AssertionError: expected 200 to equal 400\n    at Context.eval (webpack:///./cypress/e2e/addPetToStore.spec.js:58:39)",
                "diff": "- 200\n+ 400\n"
              },
              "uuid": "ac42ee0e-9ce3-49a3-9723-fb24f059b505",
              "parentUUID": "4d8e7edc-46d7-4660-a111-19f7a00fd46b",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should be able to add pet with all the fields",
              "fullTitle": "Add pet to the store - Test Senarios should be able to add pet with all the fields",
              "timedOut": null,
              "duration": 625,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const fullPetData = {\n  id: petId,\n  category: {\n    id: 1,\n    name: 'Dog'\n  },\n  name: `Pet_${petId}`,\n  photoUrls: ['https://example.com/photo1.jpg'],\n  tags: [{\n    id: 1,\n    name: 'Friendly'\n  }],\n  status: 'available'\n};\ncy.request({\n  method: 'POST',\n  url: '/pet',\n  body: fullPetData,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n}).then(response => {\n  expect(response.status).to.equal(200);\n  expect(response.body.id).to.equal(petId);\n  expect(response.body.catagory.name).to.equal(fullPetData.category.name);\n  expect(response.body.tags[0].name).to.equal(fullPetData.tags[0].name);\n  expect(response.body.status).to.equal(fullPetData.status);\n  expect(response.body.photoUrls).to.deep.equal(fullPetData.photoUrls);\n});",
              "err": {
                "message": "TypeError: Cannot read properties of undefined (reading 'name')",
                "estack": "TypeError: Cannot read properties of undefined (reading 'name')\n    at Context.eval (webpack:///./cypress/e2e/addPetToStore.spec.js:96:42)",
                "diff": null
              },
              "uuid": "fb0fe260-5044-4aff-863a-1d4b067dbd38",
              "parentUUID": "4d8e7edc-46d7-4660-a111-19f7a00fd46b",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b8dddb0a-f4f4-487f-a7a0-57767df104e7"
          ],
          "failures": [
            "ac42ee0e-9ce3-49a3-9723-fb24f059b505",
            "fb0fe260-5044-4aff-863a-1d4b067dbd38"
          ],
          "pending": [],
          "skipped": [],
          "duration": 2506,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "7.0.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": {
        "reportDir": "cypress/reports",
        "overwrite": false,
        "html": true,
        "json": true
      },
      "version": "6.2.0"
    }
  }
}